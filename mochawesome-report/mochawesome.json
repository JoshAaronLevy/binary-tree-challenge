{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-23T10:55:50.569Z",
    "end": "2023-08-23T10:55:50.572Z",
    "duration": 3,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a8040233-6935-4903-9a5a-2bd3d8ecbaa2",
      "title": "",
      "fullFile": "/Users/joshlevy/Desktop/binary-tree-challenge/tests/index.spec.js",
      "file": "/tests/index.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8ad92ee4-47e2-4a40-9208-e2de6b571e54",
          "title": "Binary Tree Branch Sum",
          "fullFile": "/Users/joshlevy/Desktop/binary-tree-challenge/tests/index.spec.js",
          "file": "/tests/index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return \"Left\" when the left branch is larger",
              "fullTitle": "Binary Tree Branch Sum should return \"Left\" when the left branch is larger",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(solution([3, 6, 2, 9, -1, 10])).to.equal('Left');",
              "err": {},
              "uuid": "fa38ee7f-d4ab-4212-905d-4999c3b4b3ef",
              "parentUUID": "8ad92ee4-47e2-4a40-9208-e2de6b571e54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return \"Right\" when the right branch is larger",
              "fullTitle": "Binary Tree Branch Sum should return \"Right\" when the right branch is larger",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(solution([3, 6, 2, 9, 100, 10])).to.equal('Right');",
              "err": {},
              "uuid": "895448c2-9b3b-4788-b64b-3d029e70f158",
              "parentUUID": "8ad92ee4-47e2-4a40-9208-e2de6b571e54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty string when the branches are equal",
              "fullTitle": "Binary Tree Branch Sum should return an empty string when the branches are equal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(solution([3, 6, 6, 9, 9, 10, 10])).to.equal('');",
              "err": {},
              "uuid": "bef6f54b-0867-4d5d-b8de-82acc53acc11",
              "parentUUID": "8ad92ee4-47e2-4a40-9208-e2de6b571e54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty string for an empty tree",
              "fullTitle": "Binary Tree Branch Sum should return an empty string for an empty tree",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(solution([])).to.equal('');",
              "err": {},
              "uuid": "f76e1a8b-0169-4214-a1d9-e8edd00c8500",
              "parentUUID": "8ad92ee4-47e2-4a40-9208-e2de6b571e54",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa38ee7f-d4ab-4212-905d-4999c3b4b3ef",
            "895448c2-9b3b-4788-b64b-3d029e70f158",
            "bef6f54b-0867-4d5d-b8de-82acc53acc11",
            "f76e1a8b-0169-4214-a1d9-e8edd00c8500"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}